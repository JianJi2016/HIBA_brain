comment <- gsub("^comments?: ", "", comment, ignore.case = TRUE)
peak_numbers <- cmp[grep("^num peaks:", cmp, ignore.case = TRUE)]
peak_number <- gsub("^num peaks: ?", "", peak_numbers,
ignore.case = TRUE)
if (as.numeric(peak_number) > 0) {
mass_inten_posi <- which(grepl("^[0-9]", cmp) &
!grepl(": ", cmp))
mass_inten <- stringr::str_remove_all(cmp[mass_inten_posi],
"\n")
mass_inten <- stringr::str_remove(mass_inten, "\".*\"$")
mass_inten <- unlist(strsplit(mass_inten, ";"))
mass_inten <- unlist(strsplit(mass_inten, "\t| "))
# mass_inten <- unlist(strsplit(mass_inten, "\t| "))
mass_inten <- as.numeric(mass_inten[grep("^[0-9].*[0-9]$|^[0-9]$",
mass_inten)])
mz <- mass_inten[seq(1, length(mass_inten),
2)]
intensity <- mass_inten[seq(2, length(mass_inten),
2)]
spectra <- cbind.data.frame(mz = mz, ins = intensity)
return(list(Name = name,
EXACTMASS = EXACTMASS,
InChIKey = inchikey,
Smiles = smiles,
Formula = formula,
QUANTMASS = QUANTMASS,
ONTOLOGY = ONTOLOGY,
RETENTIONTIME = RETENTIONTIME,
RETENTIONINDEX = RETENTIONINDEX,
Comment = comment,
`Number of peaks` = peak_number,
Spectra = spectra))
}
else {
return(list(Name = name,
EXACTMASS = EXACTMASS,
InChIKey = inchikey,
Smiles = smiles,
Formula = formula,
QUANTMASS = QUANTMASS,
ONTOLOGY = ONTOLOGY,
RETENTIONINDEX = RETENTIONINDEX,
Comment = comment,
`Number of peaks` = peak_number,
Spectra = spectra))
}
}
cmp_list <- future.apply::future_lapply(cmp_list, get_msp)
return(cmp_list)
}
GCMS2022 <- read_lib2(file)
file = "D:/软件/msp数据库/Total GCMS 2022/Total GCMS2022.msp"
GCMS2023 <- read_lib2(file)
read_lib3 <- function (file) {
tmp <- readLines(file)
tmp <- gsub("<c3><af><c2><bb><c2><bf>", "", tmp)
start_line <- grep("^name:", tmp, ignore.case = TRUE)
num_line <- diff(c(start_line, length(tmp) + 1))
split_factor <- rep(1:length(start_line), num_line)
cmp_list <- split(tmp, split_factor)
cmp = cmp_list[[1]]
get_msp <- function(cmp) {
name <- cmp[grep("^name:", cmp, ignore.case = TRUE)]
name <- gsub("^name: ", "", name, ignore.case = TRUE)
EXACTMASS <- cmp[grep("^EXACTMASS:", cmp, ignore.case = TRUE)]
EXACTMASS <- gsub("^EXACTMASS: ", "", EXACTMASS, ignore.case = TRUE)
smiles <- cmp[grep("^smiles:", cmp, ignore.case = TRUE)]
smiles <- gsub("^smiles: ", "", smiles, ignore.case = TRUE)
inchikey <- cmp[grep("^inchikey:", cmp, ignore.case = TRUE)]
inchikey <- gsub("inchikey: ", "", inchikey, ignore.case = TRUE)
formula <- cmp[grep("^formula:", cmp, ignore.case = TRUE)]
formula <- gsub("^formula: ", "", formula, ignore.case = TRUE)
ONTOLOGY <- cmp[grep("^ONTOLOGY:", cmp, ignore.case = TRUE)]
ONTOLOGY <- gsub("^ONTOLOGY: ", "", ONTOLOGY, ignore.case = TRUE)
RETENTIONTIME <- cmp[grep("^RETENTIONTIME:", cmp, ignore.case = TRUE)]
RETENTIONTIME <- gsub("^RETENTIONTIME: ", "", RETENTIONTIME, ignore.case = TRUE)
RETENTIONINDEX <- cmp[grep("^RETENTIONINDEX:", cmp, ignore.case = TRUE)]
RETENTIONINDEX <- gsub("^RETENTIONINDEX: ", "", RETENTIONINDEX, ignore.case = TRUE)
QUANTMASS <- cmp[grep("^QUANTMASS:", cmp, ignore.case = TRUE)]
QUANTMASS <- gsub("^QUANTMASS: ", "", QUANTMASS, ignore.case = TRUE)
comment <- cmp[grep("^comments?:", cmp, ignore.case = TRUE)]
comment <- gsub("^comments?: ", "", comment, ignore.case = TRUE)
peak_numbers <- cmp[grep("^num peaks:", cmp, ignore.case = TRUE)]
peak_number <- gsub("^num peaks: ?", "", peak_numbers,
ignore.case = TRUE)
if (as.numeric(peak_number) > 0) {
mass_inten_posi <- which(grepl("^[0-9]", cmp) &
!grepl(": ", cmp))
mass_inten <- stringr::str_remove_all(cmp[mass_inten_posi],
"\n")
mass_inten <- stringr::str_remove(mass_inten, "\".*\"$")
mass_inten <- unlist(strsplit(mass_inten, ";"))
mass_inten <- unlist(strsplit(mass_inten, "\t| "))
# mass_inten <- unlist(strsplit(mass_inten, "\t| "))
mass_inten <- as.numeric(mass_inten[grep("^[0-9].*[0-9]$|^[0-9]$",
mass_inten)])
mz <- mass_inten[seq(1, length(mass_inten),
2)]
intensity <- mass_inten[seq(2, length(mass_inten),
2)]
spectra <- cbind.data.frame(mz = mz, ins = intensity)
return(list(Name = name,
EXACTMASS = EXACTMASS,
InChIKey = inchikey,
Smiles = smiles,
Formula = formula,
QUANTMASS = QUANTMASS,
ONTOLOGY = ONTOLOGY,
RETENTIONTIME = RETENTIONTIME,
RETENTIONINDEX = RETENTIONINDEX,
Comment = comment,
`Number of peaks` = peak_number,
Spectra = spectra))
}
else {
return(list(Name = name,
EXACTMASS = EXACTMASS,
InChIKey = inchikey,
Smiles = smiles,
Formula = formula,
QUANTMASS = QUANTMASS,
ONTOLOGY = ONTOLOGY,
RETENTIONINDEX = RETENTIONINDEX,
Comment = comment,
`Number of peaks` = peak_number,
Spectra = spectra))
}
}
cmp_list <- future.apply::future_lapply(cmp_list, get_msp)
return(cmp_list)
}
GCMS2024 <- read_lib3(file)
library(ropls)
setwd("C:/Users/lenovo/Desktop/2021 Nature Communication")
SJDZ <- read.csv("SJDZ.csv")
ggscatter(SJDZ,
x= "GABA",
y = "TAU",
color = "Groups",
palette = "npg",
shape = 'Groups',
add = 'reg.line',
conf.int = TRUE)
library(ggpubr)
ggscatter(SJDZ,
x= "GABA",
y = "TAU",
color = "Groups",
palette = "npg",
shape = 'Groups',
add = 'reg.line',
conf.int = TRUE)
colnames(SJDZ)
ggerrorplot(SJDZ,
x = "Groups",
y = "X5.HT",
# add = "jitter",
color = "Groups",
palette = "npg") +
coord_flip()
setwd("C:/Users/lenovo/Desktop/2021 Nature Communication/Github")
neurotransmitters <- read.csv("neurotransmitters.csv")
library(ggpubr)
ggerrorplot(neurotransmitters,
x = "Groups",
y = "X5.HT",
# add = "jitter",
color = "Groups",
palette = "npg") +
coord_flip()
ggsave("5-HT.pdf",height = 2,width = 5)
neurotransmitters <- read.csv("neurotransmitters.csv")
library(ggpubr)
ggerrorplot(neurotransmitters,
x = "Groups",
y = "X5.HT",
# add = "jitter",
color = "Groups",
palette = "npg") +
coord_flip()
ggsave("5-HT.pdf",height = 2,width = 5)
type <- read.csv("type.csv")
library(ggpubr)
ggbarplot(type,
x = "type",
y = "number",
fill = "type",
palette = "npg",
label = T) +
coord_flip() +
theme(legend.position = "null")
metabolites <- read.csv("metabolites number.csv")
library(ggpubr)
ggbarplot(metabolites,
x = "type",
y = "number",
fill = "type",
palette = "npg",
label = T) +
coord_flip() +
theme(legend.position = "null")
ggsave("metabolites number.pdf")
# Fig.3c
class <- read.csv("class.csv")
library(dplyr)
class %>%
group_by(class) %>%
summarise(n = n()) %>%
arrange(desc(n)) -> data
colnames(data) = c("category","count")
write.csv(data,"data2.csv")
ggbarplot(data,
x = "category",
y = "count",
fill = "category",
palette = "png")
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
# geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
# scale_fill_brewer(palette=1) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
ggsave("chart.pdf")
# Fig.3c
class <- read.csv("class.csv")
library(dplyr)
class %>%
group_by(class) %>%
summarise(n = n()) %>%
arrange(desc(n)) -> data
colnames(data) = c("category","count")
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
# geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
# scale_fill_brewer(palette=1) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Fig.3c
class <- read.csv("ClassyFire categories.csv")
library(dplyr)
class %>%
group_by(class) %>%
summarise(n = n()) %>%
arrange(desc(n)) -> data
colnames(data) = c("category","count")
data$fraction <- data$count / sum(data$count)
data$ymax <- cumsum(data$fraction)
data$ymin <- c(0, head(data$ymax, n=-1))
data$labelPosition <- (data$ymax + data$ymin) / 2
data$label <- paste0(data$category, "\n value: ", data$count)
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
ggsave("ClassyFire categories.pdf")
library(tidyverse)
library(reshape2)
library(dplyr)
library(gg.gap)
library(pacman)
pacman::p_load(dplyr,tidyverse,reshape2,gg.gap)
data <- read.csv("SFACID.csv")
reshapedata <- melt(data,1:2)
p1= ggbarplot(reshapedata, x = "variable", y = "value", fill = "Groups",
add = "mean_se", add.params = list(width=0.3, size = .25),
position = position_dodge(0.8), size = 0.25,
palette = "npg")+
labs(x = "",
y = "Relative intensity",fill = "")+
rotate_x_text(angle = 60)
p1+
coord_cartesian(ylim = c(40,85)) +  #ÉèÖÃÉÏÃæÒ»°ëµÄÖµÓò
scale_y_continuous(breaks = c(195,205,5)) #ÒÔ5Îªµ¥Î»»®·ÖYÖá
gg.gap(plot = p1,
segments = c(10, 40),
tick_width = c(2,10),
rel_heights = c(0.25, 0, 0.1),
ylim = c(0, 85)
)
ggsave("shortfatty acid.pdf",
width = 8,
height = 5
)
pathway <- read.csv("msea_ora_result.csv")
library(ggpubr)
library(dplyr)
ggscatter(pathway[1:20,] %>%
arrange(logP),
x = "Name",
y = "logP",
shape = 21,
fill = "logP",
size = "Ratio") +
coord_flip() +
labs(y = "-logP",
x = "")
ggsave("metabolic pathway.pdf", height = 6,width = 10)
g <- read.csv("g_figures.csv")
library(ggplot2)
library(ggpubr)
library(patchwork)
gname <- colnames(g)
fir9 <- ggstripchart(g,
x = "Groups",
y = gname[3],
color = "Groups",
palette = "png",
add = "mean_sd")
for (i in 4:20) {
fir9 = fir9 + ggstripchart(g,
x = "Groups",
y = gname[i],
color = "Groups",
palette = "png",
add = "mean_sd")
}
fir10 <- ggstripchart(g,
x = "Groups",
y = gname[12],
color = "Groups",
palette = "png",
add = "mean_sd")
for (i in 13:20) {
fir10 = fir10 + ggstripchart(g,
x = "Groups",
y = gname[i],
color = "Groups",
palette = "png",
add = "mean_sd")
}
fir9
corr <- read.csv("corr.csv")
rownames(corr) = corr[,1]
corr = corr[,-1]
library(corrplot)
result_pair = cor(corr)
rows = rownames(result_pair)  # ÐÐÃû
cols = colnames(result_pair)  # ÐÐÃû
write.csv(result_pair,"result_pair.csv")
datap <- data.frame()
for (j in 19:34) {
for (i in 1:18) {
datap[i + 35*(j-1),1] = rows[i]
datap[i + 35*(j-1),2] = result_pair[i,j]
datap[i + 35*(j-1),3] = cols[j]
}
}
library(dplyr)
colnames(datap) = c("Target", "value", "Source")
datap %>%
filter(
value > 0.7| value < -0.7
) %>%
filter(value != 1) -> datap4
write.csv(datap4,"datap4.csv")
nrow(datap4)
library(readr)
corr <- read.csv("correlation data.csv")
rownames(corr) = corr[,1]
corr = corr[,-1]
library(corrplot)
result_pair = cor(corr)
rows = rownames(result_pair)  # ÐÐÃû
cols = colnames(result_pair)  # ÐÐÃû
write.csv(result_pair,"result_pair.csv")
datap <- data.frame()
for (j in 19:34) {
for (i in 1:18) {
datap[i + 35*(j-1),1] = rows[i]
datap[i + 35*(j-1),2] = result_pair[i,j]
datap[i + 35*(j-1),3] = cols[j]
}
}
library(dplyr)
colnames(datap) = c("Target", "value", "Source")
datap %>%
filter(
value > 0.7| value < -0.7
) %>%
filter(value != 1) -> datap4
write.csv(datap4,"edgeCytoscape.csv")
df3 <- read.csv("LDA.csv")
library(dplyr)
df3$mpg_grp <- factor(ifelse(df3$LDAscore<0, "low", "high"), levels = c("low", "high"))
ggbarplot(df3 , x="Name", y= "LDAscore",
fill = "mpg_grp", color = "white",
palette = "npg", sort.val = "desc",
sort.by.groups = FALSE,
xlab = "", ylab = "LDA score (log10)",
legend.title="", rotate=TRUE)
ggsave("LDA barplot.pdf",width = 5, height = 4)
pacman::p_load(tidyverse,ggsci)
data_1 <- read.csv("data_B.csv",header = T)
data <- data_1
data$group = factor(data$group, levels = c("Movement speed",
"Movement time",
"Central area residence time",
"12 h sleep duration",
"incubation period",
"sleep time"))
empty_bar=1
to_add = data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) = colnames(data)
to_add$group=rep(levels(data$group), each=empty_bar)
data=rbind(data, to_add)
data=data %>% arrange(group)
data$id=seq(1, nrow(data))
# Get the name and the y position of each label
label_data=data
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data=data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data = base_data
grid_data$end = grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start = grid_data$start - 1
grid_data=grid_data[-1,]
# ?geom_bar
# Make the plot
# data$barwith <- as.numeric(data$barwith)
# write.csv(data, "data.csv")
# data <- read.csv("Data.csv",header = T)
p = ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group),
# width = "barwith",
stat="identity"
) +
geom_errorbar(aes(ymin = value- barwith, ymax = value + barwith),
width = 0.2,
color = "black",
position = position_dodge(0.9))+
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60),
colour = "red",  size=1 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40),
colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20),
colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") ,
color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-30,70) +
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
guides(fill=F)+
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust),
color="black", alpha=0.8, size=4, angle= label_data$angle, inherit.aes = FALSE ) +
scale_fill_npg()+
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5),
colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )
print(p)
ggsave("B.pdf",
width = 160,
height = 160,
units = "mm")
data <- read_csv("brainshort.csv")
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
data2 <- melt(data,1:3) %>%
select(2:5)
colnames(data2) = c("Region","Treatment","Metabolite","Intensity")
file_pre <- "./" # same directory as shiny file
# loading data for geomap
brain_sf <- st_read(dsn = paste(file_pre, "brain.geojson", sep = "/"),
stringsAsFactors = FALSE, quiet = TRUE)
# loading Metabolites data
demo_df <- read_csv(file = paste(file_pre, "longdata3.csv", sep = "/"),
col_names = TRUE)
